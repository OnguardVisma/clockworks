[
    {
        "Modifiers": 18,
        "FullName": "Onguard.TimeTracker.BLL.CsvHelper",
        "Methods": [
            {
                "Name": "ConvertReportToCsvFile",
                "Modifiers": 18,
                "ReturnType": "Microsoft.AspNetCore.Mvc.FileContentResult",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "Onguard.TimeTracker.BLL.HomeViewModel",
                        "Name": "viewModel"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "ToList"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "Select",
                        "Arguments": [
                            {
                                "Type": "System.Func<Onguard.TimeTracker.BLL.ReportRowViewModel, Onguard.TimeTracker.BLL.FlatReportRowViewModel>",
                                "Text": "r => new FlatReportRowViewModel()\r\n            {\r\n                Pbi = r.Pbi.Id.ToString(),\r\n                Title = r.Pbi.Fields[\"System.Title\"].ToString(),\r\n                TaskId = r.TaskId.ToString(),\r\n                ChangedBy = r.DoneBy,\r\n                StartDate = r.StartDate.ToString(\"yyyy/MM/dd HH:mm\"),\r\n                DoneDate = r.DoneDate.ToString(\"yyyy/MM/dd HH:mm\"),\r\n                TotalWorkHours = $\"{r.TotalWorkHours:0.00}\"\r\n            }"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.FlatReportRowViewModel",
                        "Name": "FlatReportRowViewModel",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "Pbi = r.Pbi.Id.ToString()"
                            },
                            {
                                "Type": "string",
                                "Text": "Title = r.Pbi.Fields[\"System.Title\"].ToString()"
                            },
                            {
                                "Type": "string",
                                "Text": "TaskId = r.TaskId.ToString()"
                            },
                            {
                                "Type": "string",
                                "Text": "ChangedBy = r.DoneBy"
                            },
                            {
                                "Type": "string",
                                "Text": "StartDate = r.StartDate.ToString(\"yyyy/MM/dd HH:mm\")"
                            },
                            {
                                "Type": "string",
                                "Text": "DoneDate = r.DoneDate.ToString(\"yyyy/MM/dd HH:mm\")"
                            },
                            {
                                "Type": "string",
                                "Text": "TotalWorkHours = $\"{r.TotalWorkHours:0.00}\""
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "int?",
                        "Name": "ToString"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "object",
                        "Name": "ToString"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "int",
                        "Name": "ToString"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.DateTime",
                        "Name": "ToString",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "\"yyyy/MM/dd HH:mm\""
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.DateTime",
                        "Name": "ToString",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "\"yyyy/MM/dd HH:mm\""
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "ServiceStack.Text.CsvSerializer",
                        "Name": "SerializeToCsv",
                        "Arguments": [
                            {
                                "Type": "System.Collections.Generic.List<Onguard.TimeTracker.BLL.FlatReportRowViewModel>",
                                "Text": "flattenedReportRows"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Mvc.FileContentResult",
                        "Name": "FileContentResult",
                        "Arguments": [
                            {
                                "Type": "byte[]",
                                "Text": "Encoding.UTF9.GetBytes(csvString)"
                            },
                            {
                                "Type": "string",
                                "Text": "\"text/csv\""
                            },
                            {
                                "Type": "string",
                                "Text": "FileDownloadName = \"OnguardReport_\" + viewModel.Input.SelectedProject + \".csv\""
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.Encoding",
                        "Name": "GetBytes",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "csvString"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "result"
                    }
                ],
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "Converts a viewmodel to Csv string",
                    "Params": {
                        "viewModel": ""
                    }
                }
            }
        ]
    },
    {
        "Modifiers": 4,
        "FullName": "Onguard.TimeTracker.BLL.FlatReportRowViewModel",
        "Properties": [
            {
                "Name": "Pbi",
                "Modifiers": 2,
                "Type": "string"
            },
            {
                "Name": "Title",
                "Modifiers": 2,
                "Type": "string"
            },
            {
                "Name": "TaskId",
                "Modifiers": 2,
                "Type": "string"
            },
            {
                "Name": "ChangedBy",
                "Modifiers": 2,
                "Type": "string"
            },
            {
                "Name": "StartDate",
                "Modifiers": 2,
                "Type": "string"
            },
            {
                "Name": "DoneDate",
                "Modifiers": 2,
                "Type": "string"
            },
            {
                "Name": "TotalWorkHours",
                "Modifiers": 2,
                "Type": "string"
            }
        ]
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.BLL.HomeViewModel",
        "Properties": [
            {
                "Name": "Projects",
                "Modifiers": 2,
                "Type": "System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>",
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "Project collection"
                }
            },
            {
                "Name": "Input",
                "Modifiers": 2,
                "Type": "Onguard.TimeTracker.BLL.InputViewModel",
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "Input"
                }
            },
            {
                "Name": "Report",
                "Modifiers": 2,
                "Type": "Onguard.TimeTracker.BLL.ReportViewModel"
            },
            {
                "Name": "ReadyToReport",
                "Modifiers": 2,
                "Type": "bool",
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "Indicator if the view has enough data to generate a report with"
                }
            }
        ]
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.BLL.HomeViewModelFactory",
        "Fields": [
            {
                "Name": "_inputViewModelFactory",
                "Modifiers": 132,
                "Type": "Onguard.TimeTracker.BLL.InputViewModelFactory"
            },
            {
                "Name": "_vstsApi",
                "Modifiers": 132,
                "Type": "Onguard.TimeTracker.DAL.VstsApi"
            }
        ],
        "Constructors": [
            {
                "Name": "HomeViewModelFactory",
                "Modifiers": 2,
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.DAL.VstsApi",
                        "Name": "VstsApi",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "VstsApiConfiguration.Url"
                            },
                            {
                                "Type": "string",
                                "Text": "VstsApiConfiguration.Psa"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.InputViewModelFactory",
                        "Name": "InputViewModelFactory"
                    }
                ]
            }
        ],
        "Methods": [
            {
                "Name": "CreateWithProject",
                "Modifiers": 2,
                "ReturnType": "Onguard.TimeTracker.BLL.HomeViewModel",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "Microsoft.AspNetCore.Http.IFormCollection",
                        "Name": "formCollection"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.InputViewModelFactory",
                        "Name": "Create",
                        "Arguments": [
                            {
                                "Type": "Microsoft.AspNetCore.Http.IFormCollection",
                                "Text": "formCollection"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.HomeViewModel",
                        "Name": "HomeViewModel",
                        "Arguments": [
                            {
                                "Type": "Onguard.TimeTracker.BLL.InputViewModel",
                                "Text": "Input = _inputViewModelFactory.Create(formCollection)"
                            },
                            {
                                "Type": "System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>",
                                "Text": "Projects = _vstsApi.GetProjects().Select(p => new SelectListItem() { Text = p.Name, Value = p.Name, Selected = p.Name == inputViewModel.SelectedProject })"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.InputViewModelFactory",
                        "Name": "Create",
                        "Arguments": [
                            {
                                "Type": "Microsoft.AspNetCore.Http.IFormCollection",
                                "Text": "formCollection"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "Select",
                        "Arguments": [
                            {
                                "Type": "System.Func<Onguard.TimeTracker.DAL.ProjectModel, Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>",
                                "Text": "p => new SelectListItem() { Text = p.Name, Value = p.Name, Selected = p.Name == inputViewModel.SelectedProject }"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.DAL.VstsApi",
                        "Name": "GetProjects"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Mvc.Rendering.SelectListItem",
                        "Name": "SelectListItem",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "Text = p.Name"
                            },
                            {
                                "Type": "string",
                                "Text": "Value = p.Name"
                            },
                            {
                                "Type": "bool",
                                "Text": "Selected = p.Name == inputViewModel.SelectedProject"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "viewModel"
                    }
                ]
            },
            {
                "Name": "Create",
                "Modifiers": 2,
                "ReturnType": "Onguard.TimeTracker.BLL.HomeViewModel",
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.HomeViewModel",
                        "Name": "HomeViewModel",
                        "Arguments": [
                            {
                                "Type": "Onguard.TimeTracker.BLL.InputViewModel",
                                "Text": "Input = new InputViewModel()"
                            },
                            {
                                "Type": "System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>",
                                "Text": "Projects = _vstsApi.GetProjects().Select(p => new SelectListItem() { Text = p.Name, Value = p.Name })"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.InputViewModel",
                        "Name": "InputViewModel"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "Select",
                        "Arguments": [
                            {
                                "Type": "System.Func<Onguard.TimeTracker.DAL.ProjectModel, Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>",
                                "Text": "p => new SelectListItem() { Text = p.Name, Value = p.Name }"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.DAL.VstsApi",
                        "Name": "GetProjects"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Mvc.Rendering.SelectListItem",
                        "Name": "SelectListItem",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "Text = p.Name"
                            },
                            {
                                "Type": "string",
                                "Text": "Value = p.Name"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "viewModel"
                    }
                ]
            },
            {
                "Name": "CreateWithDates",
                "Modifiers": 2,
                "ReturnType": "Onguard.TimeTracker.BLL.HomeViewModel",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "Microsoft.AspNetCore.Http.IFormCollection",
                        "Name": "formCollection"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.InputViewModelFactory",
                        "Name": "Create",
                        "Arguments": [
                            {
                                "Type": "Microsoft.AspNetCore.Http.IFormCollection",
                                "Text": "formCollection"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.HomeViewModel",
                        "Name": "HomeViewModel",
                        "Arguments": [
                            {
                                "Type": "Onguard.TimeTracker.BLL.InputViewModel",
                                "Text": "Input = inputViewModel"
                            },
                            {
                                "Type": "System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>",
                                "Text": "Projects = _vstsApi.GetProjects().Select(p => new SelectListItem { Text = p.Name, Value = p.Name })"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "Select",
                        "Arguments": [
                            {
                                "Type": "System.Func<Onguard.TimeTracker.DAL.ProjectModel, Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>",
                                "Text": "p => new SelectListItem { Text = p.Name, Value = p.Name }"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.DAL.VstsApi",
                        "Name": "GetProjects"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Mvc.Rendering.SelectListItem",
                        "Name": "SelectListItem",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "Text = p.Name"
                            },
                            {
                                "Type": "string",
                                "Text": "Value = p.Name"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "viewModel"
                    }
                ]
            },
            {
                "Name": "CreateWithInput",
                "Modifiers": 2,
                "ReturnType": "Onguard.TimeTracker.BLL.HomeViewModel",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "Microsoft.AspNetCore.Http.IFormCollection",
                        "Name": "formCollection"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.InputViewModelFactory",
                        "Name": "Create",
                        "Arguments": [
                            {
                                "Type": "Microsoft.AspNetCore.Http.IFormCollection",
                                "Text": "formCollection"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "!string.IsNullOrEmpty(inputViewModel.SelectedProject) && !string.IsNullOrEmpty(inputViewModel.SelectedTeam) && !string.IsNullOrEmpty(inputViewModel.SelectedSprint)",
                                "Statements": [
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "System.Linq.Enumerable",
                                        "Name": "Select",
                                        "Arguments": [
                                            {
                                                "Type": "System.Func<Onguard.TimeTracker.DAL.ProjectModel, Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>",
                                                "Text": "p => new SelectListItem { Text = p.Name, Value = p.Name }"
                                            }
                                        ]
                                    },
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "Onguard.TimeTracker.DAL.VstsApi",
                                        "Name": "GetProjects"
                                    },
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "Microsoft.AspNetCore.Mvc.Rendering.SelectListItem",
                                        "Name": "SelectListItem",
                                        "Arguments": [
                                            {
                                                "Type": "string",
                                                "Text": "Text = p.Name"
                                            },
                                            {
                                                "Type": "string",
                                                "Text": "Value = p.Name"
                                            }
                                        ]
                                    },
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "Onguard.TimeTracker.BLL.HomeViewModelFactory",
                                        "Name": "ConstructViewModel",
                                        "Arguments": [
                                            {
                                                "Type": "Onguard.TimeTracker.BLL.InputViewModel",
                                                "Text": "inputViewModel"
                                            },
                                            {
                                                "Type": "System.Collections.Generic.IEnumerable<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem>",
                                                "Text": "_vstsApi.GetReport(inputViewModel.SelectedProject, inputViewModel.SelectedTeam, inputViewModel.SelectedSprint)"
                                            }
                                        ]
                                    },
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "Onguard.TimeTracker.DAL.VstsApi",
                                        "Name": "GetReport",
                                        "Arguments": [
                                            {
                                                "Type": "string",
                                                "Text": "inputViewModel.SelectedProject"
                                            },
                                            {
                                                "Type": "string",
                                                "Text": "inputViewModel.SelectedTeam"
                                            },
                                            {
                                                "Type": "string",
                                                "Text": "inputViewModel.SelectedSprint"
                                            }
                                        ]
                                    },
                                    {
                                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                                        "Expression": "new HomeViewModel\r\n                {\r\n                    Input = inputViewModel,\r\n                    Projects = projects,\r\n                    Report = report\r\n                }"
                                    },
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "Onguard.TimeTracker.BLL.HomeViewModel",
                                        "Name": "HomeViewModel",
                                        "Arguments": [
                                            {
                                                "Type": "Onguard.TimeTracker.BLL.InputViewModel",
                                                "Text": "Input = inputViewModel"
                                            },
                                            {
                                                "Type": "System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>",
                                                "Text": "Projects = projects"
                                            },
                                            {
                                                "Type": "Onguard.TimeTracker.BLL.ReportViewModel",
                                                "Text": "Report = report"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "new HomeViewModel\r\n            {\r\n                Input = inputViewModel,\r\n                Projects = _vstsApi.GetProjects().Select(p => new SelectListItem { Text = p.Name, Value = p.Name }),\r\n\r\n                Report = ConstructViewModel(inputViewModel, _vstsApi.GetReport(inputViewModel.SelectedProject,\r\n                    inputViewModel.SelectedTeam, inputViewModel.SelectedStartDate, inputViewModel.SelectedEndDate,\r\n                    inputViewModel.PbiTag, inputViewModel.IncludeWorkItemTypePbi, inputViewModel.IncludeWorkItemTypeDefect))\r\n            }"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.HomeViewModel",
                        "Name": "HomeViewModel",
                        "Arguments": [
                            {
                                "Type": "Onguard.TimeTracker.BLL.InputViewModel",
                                "Text": "Input = inputViewModel"
                            },
                            {
                                "Type": "System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>",
                                "Text": "Projects = _vstsApi.GetProjects().Select(p => new SelectListItem { Text = p.Name, Value = p.Name })"
                            },
                            {
                                "Type": "Onguard.TimeTracker.BLL.ReportViewModel",
                                "Text": "Report = ConstructViewModel(inputViewModel, _vstsApi.GetReport(inputViewModel.SelectedProject,\r\n                    inputViewModel.SelectedTeam, inputViewModel.SelectedStartDate, inputViewModel.SelectedEndDate,\r\n                    inputViewModel.PbiTag, inputViewModel.IncludeWorkItemTypePbi, inputViewModel.IncludeWorkItemTypeDefect))"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "Select",
                        "Arguments": [
                            {
                                "Type": "System.Func<Onguard.TimeTracker.DAL.ProjectModel, Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>",
                                "Text": "p => new SelectListItem { Text = p.Name, Value = p.Name }"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.DAL.VstsApi",
                        "Name": "GetProjects"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Mvc.Rendering.SelectListItem",
                        "Name": "SelectListItem",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "Text = p.Name"
                            },
                            {
                                "Type": "string",
                                "Text": "Value = p.Name"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.HomeViewModelFactory",
                        "Name": "ConstructViewModel",
                        "Arguments": [
                            {
                                "Type": "Onguard.TimeTracker.BLL.InputViewModel",
                                "Text": "inputViewModel"
                            },
                            {
                                "Type": "System.Collections.Generic.IEnumerable<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem>",
                                "Text": "_vstsApi.GetReport(inputViewModel.SelectedProject,\r\n                    inputViewModel.SelectedTeam, inputViewModel.SelectedStartDate, inputViewModel.SelectedEndDate,\r\n                    inputViewModel.PbiTag, inputViewModel.IncludeWorkItemTypePbi, inputViewModel.IncludeWorkItemTypeDefect)"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.DAL.VstsApi",
                        "Name": "GetReport",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "inputViewModel.SelectedProject"
                            },
                            {
                                "Type": "string",
                                "Text": "inputViewModel.SelectedTeam"
                            },
                            {
                                "Type": "System.DateTime",
                                "Text": "inputViewModel.SelectedStartDate"
                            },
                            {
                                "Type": "System.DateTime",
                                "Text": "inputViewModel.SelectedEndDate"
                            },
                            {
                                "Type": "string",
                                "Text": "inputViewModel.PbiTag"
                            },
                            {
                                "Type": "bool",
                                "Text": "inputViewModel.IncludeWorkItemTypePbi"
                            },
                            {
                                "Type": "bool",
                                "Text": "inputViewModel.IncludeWorkItemTypeDefect"
                            }
                        ]
                    }
                ]
            },
            {
                "Name": "ConstructViewModel",
                "ReturnType": "Onguard.TimeTracker.BLL.ReportViewModel",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "Onguard.TimeTracker.BLL.InputViewModel",
                        "Name": "inputViewModel"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "System.Collections.Generic.IEnumerable<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem>",
                        "Name": "workItems"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Collections.Generic.List<Onguard.TimeTracker.BLL.ReportRowViewModel>",
                        "Name": "List<ReportRowViewModel>"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "ToArray"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "ToArray"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "Any",
                        "Arguments": [
                            {
                                "Type": "System.Func<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem, bool>",
                                "Text": "a => a.Relations.Any(r => r.Rel == \"System.LinkTypes.Hierarchy-Reverse\")"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "Any",
                        "Arguments": [
                            {
                                "Type": "System.Func<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItemRelation, bool>",
                                "Text": "r => r.Rel == \"System.LinkTypes.Hierarchy-Reverse\""
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "FirstOrDefault"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": ""
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "ToList"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "Distinct"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "Select",
                        "Arguments": [
                            {
                                "Type": "System.Func<string, int>",
                                "Text": "int.Parse"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "Select",
                        "Arguments": [
                            {
                                "Type": "System.Func<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItemRelation, string>",
                                "Text": "a => a\r\n                .Url.Split('/')\r\n                .LastOrDefault()"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "LastOrDefault"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "string",
                        "Name": "Split",
                        "Arguments": [
                            {
                                "Type": "char",
                                "Text": "'/'"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.PercentageViewModel",
                        "Name": "PercentageViewModel",
                        "Arguments": [
                            {
                                "Type": "double",
                                "Text": "DevelopmentHours = 0"
                            },
                            {
                                "Type": "double",
                                "Text": "DevelopmentPercentage = 0"
                            },
                            {
                                "Type": "double",
                                "Text": "MaintenanceHours = 0"
                            },
                            {
                                "Type": "double",
                                "Text": "MaintenancePercentage = 0"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.DAL.VstsApi",
                        "Name": "GetWorkItems",
                        "Arguments": [
                            {
                                "Type": "System.Collections.Generic.List<int>",
                                "Text": "unqiqueProductBacklogItems"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                        "Expression": "workItem in enumerable",
                        "Statements": [
                            {
                                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                "Sections": [
                                    {
                                        "Condition": "workItem.Id != null",
                                        "Statements": [
                                            {
                                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                "ContainingType": "Onguard.TimeTracker.DAL.VstsApi",
                                                "Name": "GetWorkItemRevisions",
                                                "Arguments": [
                                                    {
                                                        "Type": "int",
                                                        "Text": "workItem.Id.Value"
                                                    }
                                                ]
                                            },
                                            {
                                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                "ContainingType": "System.DateTime",
                                                "Name": "Parse",
                                                "Arguments": [
                                                    {
                                                        "Type": "string",
                                                        "Text": "workItemRevisions.Values[0].Fields.WorkItemChangedDate"
                                                    }
                                                ]
                                            },
                                            {
                                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                "ContainingType": "System.DateTime",
                                                "Name": "Parse",
                                                "Arguments": [
                                                    {
                                                        "Type": "string",
                                                        "Text": "workItemRevisions.Values[workItemRevisions.Count - 1].Fields.WorkItemChangedDate"
                                                    }
                                                ]
                                            },
                                            {
                                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                "ContainingType": "int",
                                                "Name": "Parse",
                                                "Arguments": [
                                                    {
                                                        "Type": "string",
                                                        "Text": "(string)(workItem.Relations.FirstOrDefault(r => r.Rel == \"System.LinkTypes.Hierarchy-Reverse\")?.Url.Split('/').LastOrDefault() ?? throw new InvalidOperationException())"
                                                    }
                                                ]
                                            },
                                            {
                                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                "ContainingType": "System.Linq.Enumerable",
                                                "Name": "FirstOrDefault",
                                                "Arguments": [
                                                    {
                                                        "Type": "System.Func<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItemRelation, bool>",
                                                        "Text": "r => r.Rel == \"System.LinkTypes.Hierarchy-Reverse\""
                                                    }
                                                ]
                                            },
                                            {
                                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                "ContainingType": "System.Linq.Enumerable",
                                                "Name": "LastOrDefault"
                                            },
                                            {
                                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                "ContainingType": "string",
                                                "Name": "Split",
                                                "Arguments": [
                                                    {
                                                        "Type": "char",
                                                        "Text": "'/'"
                                                    }
                                                ]
                                            },
                                            {
                                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                "ContainingType": "System.InvalidOperationException",
                                                "Name": "InvalidOperationException"
                                            },
                                            {
                                                "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                                                "Expression": "day in EachDay(firstDate.Date, lastDate.Date)",
                                                "Statements": [
                                                    {
                                                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                                        "Sections": [
                                                            {
                                                                "Condition": "HourCalculator.IsWorkday(day)",
                                                                "Statements": [
                                                                    {
                                                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                                        "ContainingType": "Onguard.TimeTracker.BLL.HourCalculator",
                                                                        "Name": "StartOfBusiness",
                                                                        "Arguments": [
                                                                            {
                                                                                "Type": "System.DateTime",
                                                                                "Text": "day"
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                                        "ContainingType": "Onguard.TimeTracker.BLL.HourCalculator",
                                                                        "Name": "CloseOfBusiness",
                                                                        "Arguments": [
                                                                            {
                                                                                "Type": "System.DateTime",
                                                                                "Text": "day"
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                                        "ContainingType": "System.Linq.Enumerable",
                                                                        "Name": "Where",
                                                                        "Arguments": [
                                                                            {
                                                                                "Type": "System.Func<Onguard.TimeTracker.DAL.ListofRevisionsReponse.Value, bool>",
                                                                                "Text": "x => DateTime.Parse(x.Fields.WorkItemChangedDate).Date == day.Date"
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                                        "ContainingType": "System.DateTime",
                                                                        "Name": "Parse",
                                                                        "Arguments": [
                                                                            {
                                                                                "Type": "string",
                                                                                "Text": "x.Fields.WorkItemChangedDate"
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                                                                        "Expression": "rev in revs",
                                                                        "Statements": [
                                                                            {
                                                                                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                                                                "Sections": [
                                                                                    {
                                                                                        "Condition": "assignee != prevAssignee",
                                                                                        "Statements": [
                                                                                            {
                                                                                                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                                                                                "Sections": [
                                                                                                    {
                                                                                                        "Condition": "prevAssignee != \"\" && hoursWorked > TimeSpan.Zero",
                                                                                                        "Statements": [
                                                                                                            {
                                                                                                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                                                                                "ContainingType": "Onguard.TimeTracker.BLL.ReportRowViewModel",
                                                                                                                "Name": "ReportRowViewModel",
                                                                                                                "Arguments": [
                                                                                                                    {
                                                                                                                        "Type": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem",
                                                                                                                        "Text": "Pbi = productBacklogItems.Single(pbi => pbi.Id == pbiId)"
                                                                                                                    },
                                                                                                                    {
                                                                                                                        "Type": "string",
                                                                                                                        "Text": "PbiUrl = VstsApiConfiguration.Url + $\"/{inputViewModel.SelectedProject}/_workitems/edit/{productBacklogItems.Single(pbi => pbi.Id == pbiId).Id}\""
                                                                                                                    },
                                                                                                                    {
                                                                                                                        "Type": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem",
                                                                                                                        "Text": "VstsWorkItem = workItem"
                                                                                                                    },
                                                                                                                    {
                                                                                                                        "Type": "int",
                                                                                                                        "Text": "TaskId = workItem.Id.Value"
                                                                                                                    },
                                                                                                                    {
                                                                                                                        "Type": "string",
                                                                                                                        "Text": "TaskUrl = VstsApiConfiguration.Url + $\"/{inputViewModel.SelectedProject}/_workitems/edit/{workItem.Id.Value}\""
                                                                                                                    },
                                                                                                                    {
                                                                                                                        "Type": "System.DateTime",
                                                                                                                        "Text": "StartDate = workStartTime"
                                                                                                                    },
                                                                                                                    {
                                                                                                                        "Type": "System.DateTime",
                                                                                                                        "Text": "DoneDate = workEndTime"
                                                                                                                    },
                                                                                                                    {
                                                                                                                        "Type": "double",
                                                                                                                        "Text": "TotalWorkHours = hoursWorked.TotalHours"
                                                                                                                    },
                                                                                                                    {
                                                                                                                        "Type": "string",
                                                                                                                        "Text": "DoneBy = prevAssignee"
                                                                                                                    }
                                                                                                                ]
                                                                                                            },
                                                                                                            {
                                                                                                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                                                                                "ContainingType": "System.Linq.Enumerable",
                                                                                                                "Name": "Single",
                                                                                                                "Arguments": [
                                                                                                                    {
                                                                                                                        "Type": "System.Func<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem, bool>",
                                                                                                                        "Text": "pbi => pbi.Id == pbiId"
                                                                                                                    }
                                                                                                                ]
                                                                                                            },
                                                                                                            {
                                                                                                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                                                                                "ContainingType": "System.Linq.Enumerable",
                                                                                                                "Name": "Single",
                                                                                                                "Arguments": [
                                                                                                                    {
                                                                                                                        "Type": "System.Func<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem, bool>",
                                                                                                                        "Text": "pbi => pbi.Id == pbiId"
                                                                                                                    }
                                                                                                                ]
                                                                                                            },
                                                                                                            {
                                                                                                                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                                                                                                "Sections": [
                                                                                                                    {
                                                                                                                        "Condition": "t.ToString() == \"Defect\""
                                                                                                                    }
                                                                                                                ]
                                                                                                            },
                                                                                                            {
                                                                                                                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                                                                                                "Sections": [
                                                                                                                    {
                                                                                                                        "Condition": "t.ToString() == \"Product Backlog Item\""
                                                                                                                    }
                                                                                                                ]
                                                                                                            },
                                                                                                            {
                                                                                                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                                                                                "ContainingType": "System.Collections.Generic.List<Onguard.TimeTracker.BLL.ReportRowViewModel>",
                                                                                                                "Name": "Add",
                                                                                                                "Arguments": [
                                                                                                                    {
                                                                                                                        "Type": "Onguard.TimeTracker.BLL.ReportRowViewModel",
                                                                                                                        "Text": "reportRowViewModel"
                                                                                                                    }
                                                                                                                ]
                                                                                                            },
                                                                                                            {
                                                                                                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                                                                                "ContainingType": "Onguard.TimeTracker.BLL.HomeViewModelFactory",
                                                                                                                "Name": "UpdatePercentage",
                                                                                                                "Arguments": [
                                                                                                                    {
                                                                                                                        "Type": "Onguard.TimeTracker.BLL.PercentageViewModel",
                                                                                                                        "Text": "percentageViewModel"
                                                                                                                    },
                                                                                                                    {
                                                                                                                        "Type": "System.TimeSpan",
                                                                                                                        "Text": "hoursWorked"
                                                                                                                    },
                                                                                                                    {
                                                                                                                        "Type": "Onguard.TimeTracker.BLL.ReportRowViewModel",
                                                                                                                        "Text": "reportRowViewModel"
                                                                                                                    }
                                                                                                                ]
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                                                                "Sections": [
                                                                                    {
                                                                                        "Condition": "rev.Fields.WorkItemState == ToDo && previousState != ToDo",
                                                                                        "Statements": [
                                                                                            {
                                                                                                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                                                                                "Sections": [
                                                                                                    {
                                                                                                        "Condition": "isBusy",
                                                                                                        "Statements": [
                                                                                                            {
                                                                                                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                                                                                "ContainingType": "System.DateTime",
                                                                                                                "Name": "Parse",
                                                                                                                "Arguments": [
                                                                                                                    {
                                                                                                                        "Type": "string",
                                                                                                                        "Text": "rev.Fields.WorkItemChangedDate"
                                                                                                                    }
                                                                                                                ]
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                                                                "Sections": [
                                                                                    {
                                                                                        "Condition": "rev.Fields.WorkItemState == InProgress && previousState != InProgress",
                                                                                        "Statements": [
                                                                                            {
                                                                                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                                                                "ContainingType": "System.DateTime",
                                                                                                "Name": "Parse",
                                                                                                "Arguments": [
                                                                                                    {
                                                                                                        "Type": "string",
                                                                                                        "Text": "rev.Fields.WorkItemChangedDate"
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                                                                "Sections": [
                                                                                    {
                                                                                        "Condition": "rev.Fields.WorkItemState == Done && previousState != Done",
                                                                                        "Statements": [
                                                                                            {
                                                                                                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                                                                                "Sections": [
                                                                                                    {
                                                                                                        "Condition": "isBusy",
                                                                                                        "Statements": [
                                                                                                            {
                                                                                                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                                                                                "ContainingType": "System.DateTime",
                                                                                                                "Name": "Parse",
                                                                                                                "Arguments": [
                                                                                                                    {
                                                                                                                        "Type": "string",
                                                                                                                        "Text": "rev.Fields.WorkItemChangedDate"
                                                                                                                    }
                                                                                                                ]
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                                                        "Sections": [
                                                                            {
                                                                                "Condition": "isBusy"
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                                                        "Sections": [
                                                                            {
                                                                                "Condition": "hoursWorked > TimeSpan.Zero",
                                                                                "Statements": [
                                                                                    {
                                                                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                                                        "ContainingType": "Onguard.TimeTracker.BLL.ReportRowViewModel",
                                                                                        "Name": "ReportRowViewModel",
                                                                                        "Arguments": [
                                                                                            {
                                                                                                "Type": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem",
                                                                                                "Text": "Pbi = productBacklogItems.Single(pbi => pbi.Id == pbiId)"
                                                                                            },
                                                                                            {
                                                                                                "Type": "string",
                                                                                                "Text": "PbiUrl = VstsApiConfiguration.Url + $\"/{inputViewModel.SelectedProject}/_workitems/edit/{productBacklogItems.Single(pbi => pbi.Id == pbiId).Id}\""
                                                                                            },
                                                                                            {
                                                                                                "Type": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem",
                                                                                                "Text": "VstsWorkItem = workItem"
                                                                                            },
                                                                                            {
                                                                                                "Type": "int",
                                                                                                "Text": "TaskId = workItem.Id.Value"
                                                                                            },
                                                                                            {
                                                                                                "Type": "string",
                                                                                                "Text": "TaskUrl = VstsApiConfiguration.Url + $\"/{inputViewModel.SelectedProject}/_workitems/edit/{workItem.Id.Value}\""
                                                                                            },
                                                                                            {
                                                                                                "Type": "System.DateTime",
                                                                                                "Text": "StartDate = workStartTime"
                                                                                            },
                                                                                            {
                                                                                                "Type": "System.DateTime",
                                                                                                "Text": "DoneDate = workEndTime"
                                                                                            },
                                                                                            {
                                                                                                "Type": "double",
                                                                                                "Text": "TotalWorkHours = hoursWorked.TotalHours"
                                                                                            },
                                                                                            {
                                                                                                "Type": "string",
                                                                                                "Text": "DoneBy = assignee"
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                                                        "ContainingType": "System.Linq.Enumerable",
                                                                                        "Name": "Single",
                                                                                        "Arguments": [
                                                                                            {
                                                                                                "Type": "System.Func<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem, bool>",
                                                                                                "Text": "pbi => pbi.Id == pbiId"
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                                                        "ContainingType": "System.Linq.Enumerable",
                                                                                        "Name": "Single",
                                                                                        "Arguments": [
                                                                                            {
                                                                                                "Type": "System.Func<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem, bool>",
                                                                                                "Text": "pbi => pbi.Id == pbiId"
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                                                                        "Sections": [
                                                                                            {
                                                                                                "Condition": "t.ToString() == \"Defect\""
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                                                                        "Sections": [
                                                                                            {
                                                                                                "Condition": "t.ToString() == \"Product Backlog Item\""
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                                                        "ContainingType": "System.Collections.Generic.List<Onguard.TimeTracker.BLL.ReportRowViewModel>",
                                                                                        "Name": "Add",
                                                                                        "Arguments": [
                                                                                            {
                                                                                                "Type": "Onguard.TimeTracker.BLL.ReportRowViewModel",
                                                                                                "Text": "reportRowViewModel"
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                                                                        "ContainingType": "Onguard.TimeTracker.BLL.HomeViewModelFactory",
                                                                                        "Name": "UpdatePercentage",
                                                                                        "Arguments": [
                                                                                            {
                                                                                                "Type": "Onguard.TimeTracker.BLL.PercentageViewModel",
                                                                                                "Text": "percentageViewModel"
                                                                                            },
                                                                                            {
                                                                                                "Type": "System.TimeSpan",
                                                                                                "Text": "hoursWorked"
                                                                                            },
                                                                                            {
                                                                                                "Type": "Onguard.TimeTracker.BLL.ReportRowViewModel",
                                                                                                "Text": "reportRowViewModel"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                        "Expression": "workItemViewModel in workItemsViewModel",
                        "Statements": [
                            {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "System.Linq.Enumerable",
                                "Name": "ToList"
                            },
                            {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "System.Linq.Enumerable",
                                "Name": "Where",
                                "Arguments": [
                                    {
                                        "Type": "System.Func<Onguard.TimeTracker.BLL.ReportRowViewModel, bool>",
                                        "Text": "vm => vm.IntersectsWith(workItemViewModel) && vm.TaskId != workItemViewModel.TaskId"
                                    }
                                ]
                            },
                            {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "System.Linq.Enumerable",
                                "Name": "Where",
                                "Arguments": [
                                    {
                                        "Type": "System.Func<Onguard.TimeTracker.BLL.ReportRowViewModel, bool>",
                                        "Text": "vm => vm.DoneBy.Equals(workItemViewModel.DoneBy)"
                                    }
                                ]
                            },
                            {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "string",
                                "Name": "Equals",
                                "Arguments": [
                                    {
                                        "Type": "string",
                                        "Text": "workItemViewModel.DoneBy"
                                    }
                                ]
                            },
                            {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "Onguard.TimeTracker.BLL.ReportRowViewModel",
                                "Name": "IntersectsWith",
                                "Arguments": [
                                    {
                                        "Type": "Onguard.TimeTracker.BLL.ReportRowViewModel",
                                        "Text": "workItemViewModel"
                                    }
                                ]
                            },
                            {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "System.Linq.Enumerable",
                                "Name": "Distinct"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "new ReportViewModel()\r\n            {\r\n                ReportRowViews = workItemsViewModel,\r\n                PercentageView = percentageViewModel\r\n            }"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.ReportViewModel",
                        "Name": "ReportViewModel",
                        "Arguments": [
                            {
                                "Type": "System.Collections.Generic.IEnumerable<Onguard.TimeTracker.BLL.ReportRowViewModel>",
                                "Text": "ReportRowViews = workItemsViewModel"
                            },
                            {
                                "Type": "Onguard.TimeTracker.BLL.PercentageViewModel",
                                "Text": "PercentageView = percentageViewModel"
                            }
                        ]
                    }
                ]
            },
            {
                "Name": "UpdatePercentage",
                "Modifiers": 20,
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "Onguard.TimeTracker.BLL.PercentageViewModel",
                        "Name": "percentageViewModel"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "System.TimeSpan",
                        "Name": "hoursWorked"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "Onguard.TimeTracker.BLL.ReportRowViewModel",
                        "Name": "reportRowViewModel"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "t.ToString() == \"Product Backlog Item\""
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "t.ToString() == \"Defect\""
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "percentageViewModel.MaintenanceHours + percentageViewModel.DevelopmentHours > 0"
                            }
                        ]
                    }
                ]
            },
            {
                "Name": "EachDay",
                "ReturnType": "System.Collections.Generic.IEnumerable<System.DateTime>",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "System.DateTime",
                        "Name": "from"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "System.DateTime",
                        "Name": "thru"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.DateTime",
                        "Name": "AddDays",
                        "Arguments": [
                            {
                                "Type": "int",
                                "Text": "1"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "Modifiers": 18,
        "FullName": "Onguard.TimeTracker.BLL.HourCalculator",
        "Methods": [
            {
                "Name": "BusinessTimeDelta",
                "Modifiers": 18,
                "ReturnType": "System.TimeSpan",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "System.DateTime",
                        "Name": "start"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "System.DateTime",
                        "Name": "stop"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "start == stop",
                                "Statements": [
                                    {
                                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                                        "Expression": "TimeSpan.Zero"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "start > stop"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.HourCalculator",
                        "Name": "StartOfBusiness",
                        "Arguments": [
                            {
                                "Type": "System.DateTime",
                                "Text": "start"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.HourCalculator",
                        "Name": "CloseOfBusiness",
                        "Arguments": [
                            {
                                "Type": "System.DateTime",
                                "Text": "start"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "start < startFloor"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "start > startCeil"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "!IsWorkday(start)"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.HourCalculator",
                        "Name": "StartOfBusiness",
                        "Arguments": [
                            {
                                "Type": "System.DateTime",
                                "Text": "stop"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.HourCalculator",
                        "Name": "CloseOfBusiness",
                        "Arguments": [
                            {
                                "Type": "System.DateTime",
                                "Text": "stop"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "stop < stopFloor"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "stop > stopCeil"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "!IsWorkday(stop)"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "start.Date == stop.Date",
                                "Statements": [
                                    {
                                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                        "Sections": [
                                            {
                                                "Condition": "!workday",
                                                "Statements": [
                                                    {
                                                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                                                        "Expression": "TimeSpan.Zero"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                                        "Expression": "stop - start"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.DateTime",
                        "Name": "AddDays",
                        "Arguments": [
                            {
                                "Type": "int",
                                "Text": "1"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.DateTime",
                        "Name": "AddDays",
                        "Arguments": [
                            {
                                "Type": "int",
                                "Text": "1"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "!IsWorkday(itr)"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "firstDayTime + lastDayTime + timeInBetween"
                    }
                ]
            },
            {
                "Name": "IsWorkday",
                "Modifiers": 18,
                "ReturnType": "bool",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "System.DateTime",
                        "Name": "date"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "date.DayOfWeek != DayOfWeek.Saturday && date.DayOfWeek != DayOfWeek.Sunday"
                    }
                ]
            },
            {
                "Name": "StartOfBusiness",
                "Modifiers": 18,
                "ReturnType": "System.DateTime",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "System.DateTime",
                        "Name": "date"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "new DateTime(date.Year, date.Month, date.Day, 9, 0, 0)"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.DateTime",
                        "Name": "DateTime",
                        "Arguments": [
                            {
                                "Type": "int",
                                "Text": "date.Year"
                            },
                            {
                                "Type": "int",
                                "Text": "date.Month"
                            },
                            {
                                "Type": "int",
                                "Text": "date.Day"
                            },
                            {
                                "Type": "int",
                                "Text": "9"
                            },
                            {
                                "Type": "int",
                                "Text": "0"
                            },
                            {
                                "Type": "int",
                                "Text": "0"
                            }
                        ]
                    }
                ]
            },
            {
                "Name": "CloseOfBusiness",
                "Modifiers": 18,
                "ReturnType": "System.DateTime",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "System.DateTime",
                        "Name": "date"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "new DateTime(date.Year, date.Month, date.Day, 17, 0, 0)"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.DateTime",
                        "Name": "DateTime",
                        "Arguments": [
                            {
                                "Type": "int",
                                "Text": "date.Year"
                            },
                            {
                                "Type": "int",
                                "Text": "date.Month"
                            },
                            {
                                "Type": "int",
                                "Text": "date.Day"
                            },
                            {
                                "Type": "int",
                                "Text": "17"
                            },
                            {
                                "Type": "int",
                                "Text": "0"
                            },
                            {
                                "Type": "int",
                                "Text": "0"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.BLL.InputViewModel",
        "Properties": [
            {
                "Name": "SelectedProject",
                "Modifiers": 2,
                "Type": "string",
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "Selected Project"
                }
            },
            {
                "Name": "SelectedTeam",
                "Modifiers": 2,
                "Type": "string",
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "Selected Team"
                }
            },
            {
                "Name": "SelectedSprint",
                "Modifiers": 2,
                "Type": "string",
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "Selected Sprint"
                }
            },
            {
                "Name": "SelectedStartDate",
                "Modifiers": 2,
                "Type": "System.DateTime",
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "SelectedStartDate"
                }
            },
            {
                "Name": "SelectedEndDate",
                "Modifiers": 2,
                "Type": "System.DateTime",
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "SelectedEndDate"
                }
            },
            {
                "Name": "IncludeWorkItemTypePbi",
                "Modifiers": 2,
                "Type": "bool",
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "Include WorkItemType PBI"
                }
            },
            {
                "Name": "IncludeWorkItemTypeDefect",
                "Modifiers": 2,
                "Type": "bool",
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "Include WorkItemType Defect"
                }
            },
            {
                "Name": "PbiTag",
                "Modifiers": 2,
                "Type": "string",
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "PBI Tag"
                }
            },
            {
                "Name": "ReadyToReport",
                "Modifiers": 2,
                "Type": "bool",
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "Indicator if the view has enough data to generate a report with"
                }
            }
        ]
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.BLL.InputViewModelFactory",
        "Methods": [
            {
                "Name": "Create",
                "Modifiers": 2,
                "ReturnType": "Onguard.TimeTracker.BLL.InputViewModel",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "Microsoft.AspNetCore.Http.IFormCollection",
                        "Name": "formCollection"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "string",
                        "Name": "IsNullOrEmpty",
                        "Arguments": [
                            {
                                "Type": "Microsoft.Extensions.Primitives.StringValues",
                                "Text": "formCollection[\"Input.SelectedStartDate\"]"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.DateTime",
                        "Name": "Parse",
                        "Arguments": [
                            {
                                "Type": "Microsoft.Extensions.Primitives.StringValues",
                                "Text": "formCollection[\"Input.SelectedStartDate\"]"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "string",
                        "Name": "IsNullOrEmpty",
                        "Arguments": [
                            {
                                "Type": "Microsoft.Extensions.Primitives.StringValues",
                                "Text": "formCollection[\"Input.SelectedEndDate\"]"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.DateTime",
                        "Name": "Parse",
                        "Arguments": [
                            {
                                "Type": "Microsoft.Extensions.Primitives.StringValues",
                                "Text": "formCollection[\"Input.SelectedEndDate\"]"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "string",
                        "Name": "IsNullOrEmpty",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "inputIncludeWorkItemTypePbi"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "bool",
                        "Name": "Parse",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "inputIncludeWorkItemTypePbi.Split(',').First()"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "First"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "string",
                        "Name": "Split",
                        "Arguments": [
                            {
                                "Type": "char",
                                "Text": "','"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "string",
                        "Name": "IsNullOrEmpty",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "inputIncludeWorkItemTypeDefect"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "bool",
                        "Name": "Parse",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "inputIncludeWorkItemTypeDefect.Split(',').First()"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "First"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "string",
                        "Name": "Split",
                        "Arguments": [
                            {
                                "Type": "char",
                                "Text": "','"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "new InputViewModel\r\n            {\r\n                SelectedProject = project,\r\n                SelectedTeam = team,\r\n                SelectedSprint = sprint,\r\n                SelectedStartDate = startDate,\r\n                SelectedEndDate = endDate,\r\n                IncludeWorkItemTypePbi = includeWorkItemTypePbi,\r\n                IncludeWorkItemTypeDefect = includeWorkItemTypeDefect,\r\n                PbiTag = pbiTag\r\n            }"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.InputViewModel",
                        "Name": "InputViewModel",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "SelectedProject = project"
                            },
                            {
                                "Type": "string",
                                "Text": "SelectedTeam = team"
                            },
                            {
                                "Type": "string",
                                "Text": "SelectedSprint = sprint"
                            },
                            {
                                "Type": "System.DateTime",
                                "Text": "SelectedStartDate = startDate"
                            },
                            {
                                "Type": "System.DateTime",
                                "Text": "SelectedEndDate = endDate"
                            },
                            {
                                "Type": "bool",
                                "Text": "IncludeWorkItemTypePbi = includeWorkItemTypePbi"
                            },
                            {
                                "Type": "bool",
                                "Text": "IncludeWorkItemTypeDefect = includeWorkItemTypeDefect"
                            },
                            {
                                "Type": "string",
                                "Text": "PbiTag = pbiTag"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.BLL.PercentageViewModel",
        "Attributes": [
            {
                "Type": "System.Runtime.Serialization.DataContractAttribute",
                "Name": "DataContract"
            }
        ],
        "Properties": [
            {
                "Name": "MaintenanceHours",
                "Modifiers": 2,
                "Type": "double"
            },
            {
                "Name": "MaintenancePercentage",
                "Modifiers": 2,
                "Type": "double"
            },
            {
                "Name": "DevelopmentHours",
                "Modifiers": 2,
                "Type": "double"
            },
            {
                "Name": "DevelopmentPercentage",
                "Modifiers": 2,
                "Type": "double"
            }
        ]
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.BLL.ReportRowViewModel",
        "BaseTypes": [
            "System.Collections.Generic.IEqualityComparer<Onguard.TimeTracker.BLL.ReportRowViewModel>"
        ],
        "Attributes": [
            {
                "Type": "System.Runtime.Serialization.DataContractAttribute",
                "Name": "DataContract"
            }
        ],
        "Properties": [
            {
                "Name": "Pbi",
                "Modifiers": 2,
                "Type": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem"
            },
            {
                "Name": "DM",
                "Modifiers": 2,
                "Type": "string"
            },
            {
                "Name": "PbiUrl",
                "Modifiers": 2,
                "Type": "string"
            },
            {
                "Name": "TaskId",
                "Modifiers": 2,
                "Type": "int"
            },
            {
                "Name": "TaskUrl",
                "Modifiers": 2,
                "Type": "string"
            },
            {
                "Name": "DoneBy",
                "Modifiers": 2,
                "Type": "string"
            },
            {
                "Name": "StartDate",
                "Modifiers": 2,
                "Type": "System.DateTime"
            },
            {
                "Name": "DoneDate",
                "Modifiers": 2,
                "Type": "System.DateTime"
            },
            {
                "Name": "TotalWorkHours",
                "Modifiers": 2,
                "Type": "double"
            },
            {
                "Name": "VstsWorkItem",
                "Modifiers": 2,
                "Type": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem"
            },
            {
                "Name": "OverlappingTasks",
                "Modifiers": 2,
                "Type": "System.Collections.Generic.IEnumerable<Onguard.TimeTracker.BLL.ReportRowViewModel>"
            }
        ],
        "Methods": [
            {
                "Name": "Equals",
                "Modifiers": 2,
                "ReturnType": "bool",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "Onguard.TimeTracker.BLL.ReportRowViewModel",
                        "Name": "x"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "Onguard.TimeTracker.BLL.ReportRowViewModel",
                        "Name": "y"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "(x.DoneBy == DoneBy && x.TaskId == TaskId)"
                    }
                ]
            },
            {
                "Name": "GetHashCode",
                "Modifiers": 2,
                "ReturnType": "int",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "Onguard.TimeTracker.BLL.ReportRowViewModel",
                        "Name": "obj"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "(DoneBy.Length + TaskId + DoneDate.Ticks).GetHashCode()"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "long",
                        "Name": "GetHashCode"
                    }
                ]
            },
            {
                "Name": "IntersectsWith",
                "Modifiers": 2,
                "ReturnType": "bool",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "Onguard.TimeTracker.BLL.ReportRowViewModel",
                        "Name": "reportRowViewModel"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "intersecting"
                    }
                ]
            }
        ]
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.BLL.ReportViewModel",
        "Properties": [
            {
                "Name": "PercentageView",
                "Modifiers": 2,
                "Type": "Onguard.TimeTracker.BLL.PercentageViewModel"
            },
            {
                "Name": "ReportRowViews",
                "Modifiers": 2,
                "Type": "System.Collections.Generic.IEnumerable<Onguard.TimeTracker.BLL.ReportRowViewModel>"
            }
        ]
    },
    {
        "Modifiers": 18,
        "FullName": "Onguard.TimeTracker.BLL.TextHelper",
        "Methods": [
            {
                "Name": "RemoveTextBetweenBrackets",
                "Modifiers": 18,
                "ReturnType": "string",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "string",
                        "Name": "s"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "char",
                        "Name": "begin"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "char",
                        "Name": "end"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.RegularExpressions.Regex",
                        "Name": "Regex",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "$\"\\\\{begin}.*?\\\\{end}\""
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "regex.Replace(s, string.Empty)"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.RegularExpressions.Regex",
                        "Name": "Replace",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "s"
                            },
                            {
                                "Type": "string",
                                "Text": "string.Empty"
                            }
                        ]
                    }
                ],
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions"
                }
            }
        ]
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.Controllers.HomeController",
        "BaseTypes": [
            "Microsoft.AspNetCore.Mvc.Controller"
        ],
        "Attributes": [
            {
                "Type": "Microsoft.AspNetCore.Authorization.AuthorizeAttribute",
                "Name": "Authorize"
            }
        ],
        "Fields": [
            {
                "Name": "_homeViewModelFactory",
                "Modifiers": 132,
                "Type": "Onguard.TimeTracker.BLL.HomeViewModelFactory"
            }
        ],
        "Constructors": [
            {
                "Name": "HomeController",
                "Modifiers": 2,
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.HomeViewModelFactory",
                        "Name": "HomeViewModelFactory"
                    }
                ]
            }
        ],
        "Methods": [
            {
                "Name": "Home",
                "Modifiers": 2,
                "ReturnType": "Microsoft.AspNetCore.Mvc.IActionResult",
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.HomeViewModelFactory",
                        "Name": "Create"
                    },
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "View(viewModel)"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
                        "Name": "View",
                        "Arguments": [
                            {
                                "Type": "Onguard.TimeTracker.BLL.HomeViewModel",
                                "Text": "viewModel"
                            }
                        ]
                    }
                ]
            },
            {
                "Name": "Error",
                "Modifiers": 2,
                "ReturnType": "Microsoft.AspNetCore.Mvc.IActionResult",
                "Statements": [
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "View(new ErrorViewModel {RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier})"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
                        "Name": "View",
                        "Arguments": [
                            {
                                "Type": "Onguard.TimeTracker.Models.ErrorViewModel",
                                "Text": "new ErrorViewModel {RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier}"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.Models.ErrorViewModel",
                        "Name": "ErrorViewModel",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier"
                            }
                        ]
                    }
                ]
            },
            {
                "Name": "UpdateProject",
                "Modifiers": 2,
                "ReturnType": "Microsoft.AspNetCore.Mvc.ActionResult",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "Microsoft.AspNetCore.Http.IFormCollection",
                        "Name": "formCollection"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.HomeViewModelFactory",
                        "Name": "CreateWithProject",
                        "Arguments": [
                            {
                                "Type": "Microsoft.AspNetCore.Http.IFormCollection",
                                "Text": "formCollection"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "View(\"Home\", viewModel)"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
                        "Name": "View",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "\"Home\""
                            },
                            {
                                "Type": "Onguard.TimeTracker.BLL.HomeViewModel",
                                "Text": "viewModel"
                            }
                        ]
                    }
                ]
            },
            {
                "Name": "UpdateDates",
                "Modifiers": 2,
                "ReturnType": "Microsoft.AspNetCore.Mvc.ActionResult",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "Microsoft.AspNetCore.Http.IFormCollection",
                        "Name": "formCollection"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.HomeViewModelFactory",
                        "Name": "CreateWithDates",
                        "Arguments": [
                            {
                                "Type": "Microsoft.AspNetCore.Http.IFormCollection",
                                "Text": "formCollection"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "View(\"Home\", viewModel)"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
                        "Name": "View",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "\"Home\""
                            },
                            {
                                "Type": "Onguard.TimeTracker.BLL.HomeViewModel",
                                "Text": "viewModel"
                            }
                        ]
                    }
                ]
            },
            {
                "Name": "GenerateReport",
                "Modifiers": 2,
                "ReturnType": "Microsoft.AspNetCore.Mvc.ActionResult",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "Microsoft.AspNetCore.Http.IFormCollection",
                        "Name": "formCollection"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "action.Equals(\"CSV\")",
                                "Statements": [
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "Onguard.TimeTracker.BLL.HomeViewModelFactory",
                                        "Name": "CreateWithInput",
                                        "Arguments": [
                                            {
                                                "Type": "Microsoft.AspNetCore.Http.IFormCollection",
                                                "Text": "formCollection"
                                            }
                                        ]
                                    },
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "Onguard.TimeTracker.BLL.CsvHelper",
                                        "Name": "ConvertReportToCsvFile",
                                        "Arguments": [
                                            {
                                                "Type": "Onguard.TimeTracker.BLL.HomeViewModel",
                                                "Text": "viewModelCsv"
                                            }
                                        ]
                                    },
                                    {
                                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                                        "Expression": "csvFile"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.BLL.HomeViewModelFactory",
                        "Name": "CreateWithInput",
                        "Arguments": [
                            {
                                "Type": "Microsoft.AspNetCore.Http.IFormCollection",
                                "Text": "formCollection"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "View(\"Home\", viewModelView)"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Mvc.Controller",
                        "Name": "View",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "\"Home\""
                            },
                            {
                                "Type": "Onguard.TimeTracker.BLL.HomeViewModel",
                                "Text": "viewModelView"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "Modifiers": 2,
        "Type": 1,
        "FullName": "Onguard.TimeTracker.DAL.IVstsApi",
        "DocumentationComments": {
            "Summary": "Interface for the VSTS Api"
        },
        "Methods": [
            {
                "Name": "GetProjects",
                "ReturnType": "System.Collections.Generic.IEnumerable<Onguard.TimeTracker.DAL.ProjectModel>",
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Returns": "Collection of project names",
                    "Summary": "Get all projects"
                }
            },
            {
                "Name": "GetReport",
                "ReturnType": "System.Collections.Generic.IEnumerable<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem>",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "string",
                        "Name": "project"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "string",
                        "Name": "team"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "string",
                        "Name": "sprint"
                    }
                ],
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Returns": "Collection of work items",
                    "Summary": "Get work items for given sprint within a project"
                }
            },
            {
                "Name": "GetReport",
                "ReturnType": "System.Collections.Generic.IEnumerable<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem>",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "string",
                        "Name": "project"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "string",
                        "Name": "team"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "System.DateTime",
                        "Name": "startDate"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "System.DateTime",
                        "Name": "endDate"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "string",
                        "Name": "tag"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "bool",
                        "Name": "includePbis"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "bool",
                        "Name": "includeDefects"
                    }
                ],
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Returns": "Collection of work items",
                    "Summary": "Get work items between given dates within a project"
                }
            }
        ]
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.DAL.ListofRevisionsReponse"
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.DAL.ListofRevisionsReponse.Field",
        "Properties": [
            {
                "Name": "WorkItemType",
                "Modifiers": 2,
                "Type": "string"
            },
            {
                "Name": "WorkItemState",
                "Modifiers": 2,
                "Type": "string"
            },
            {
                "Name": "WorkItemChangedDate",
                "Modifiers": 2,
                "Type": "string"
            },
            {
                "Name": "WorkItemChangedBy",
                "Modifiers": 2,
                "Type": "Microsoft.VisualStudio.Services.WebApi.IdentityRef"
            },
            {
                "Name": "WorkItemAssignedTo",
                "Modifiers": 2,
                "Type": "Microsoft.VisualStudio.Services.WebApi.IdentityRef"
            }
        ]
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.DAL.ListofRevisionsReponse.Revisions",
        "Properties": [
            {
                "Name": "Count",
                "Modifiers": 2,
                "Type": "int"
            },
            {
                "Name": "Values",
                "Modifiers": 2,
                "Type": "Onguard.TimeTracker.DAL.ListofRevisionsReponse.Value[]"
            }
        ]
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.DAL.ListofRevisionsReponse.Value",
        "Properties": [
            {
                "Name": "Id",
                "Modifiers": 2,
                "Type": "string"
            },
            {
                "Name": "Rev",
                "Modifiers": 2,
                "Type": "string"
            },
            {
                "Name": "Fields",
                "Modifiers": 2,
                "Type": "Onguard.TimeTracker.DAL.ListofRevisionsReponse.Field"
            }
        ]
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.DAL.ProjectModel",
        "Constructors": [
            {
                "Name": "ProjectModel",
                "Modifiers": 2,
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "string",
                        "Name": "name"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "string",
                        "Name": "url"
                    }
                ]
            }
        ],
        "Properties": [
            {
                "Name": "Name",
                "Modifiers": 2,
                "Type": "string"
            },
            {
                "Name": "Url",
                "Modifiers": 2,
                "Type": "string"
            }
        ]
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.DAL.VstsApi",
        "BaseTypes": [
            "Onguard.TimeTracker.DAL.IVstsApi"
        ],
        "Fields": [
            {
                "Name": "_vssCredentials",
                "Modifiers": 132,
                "Type": "Microsoft.VisualStudio.Services.Common.VssCredentials",
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "Credentials that get generated for your PersonalAccessToken"
                }
            }
        ],
        "Constructors": [
            {
                "Name": "VstsApi",
                "Modifiers": 2,
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "string",
                        "Name": "url"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "string",
                        "Name": "personalAccessToken"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "string.IsNullOrEmpty(url)",
                                "Statements": [
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "System.ArgumentNullException",
                                        "Name": "ArgumentNullException",
                                        "Arguments": [
                                            {
                                                "Type": "string",
                                                "Text": "nameof(url)"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "string.IsNullOrEmpty(personalAccessToken)",
                                "Statements": [
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "System.ArgumentNullException",
                                        "Name": "ArgumentNullException",
                                        "Arguments": [
                                            {
                                                "Type": "string",
                                                "Text": "nameof(url)"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.VisualStudio.Services.Common.VssBasicCredential",
                        "Name": "VssBasicCredential",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "\"\""
                            },
                            {
                                "Type": "string",
                                "Text": "PersonalAccessToken"
                            }
                        ]
                    }
                ],
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "Constructor",
                    "Params": {
                        "url": "VSTS url",
                        "personalAccessToken": "Personal Access Token"
                    }
                }
            }
        ],
        "Properties": [
            {
                "Name": "Url",
                "Type": "string",
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "Url of VSTS"
                }
            },
            {
                "Name": "PersonalAccessToken",
                "Type": "string",
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "Required identifier that can be created through VSTS"
                }
            },
            {
                "Name": "ApiVersion",
                "Type": "string",
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "ApiVersion"
                }
            }
        ],
        "Methods": [
            {
                "Name": "GetProjects",
                "Modifiers": 2,
                "ReturnType": "System.Collections.Generic.IEnumerable<Onguard.TimeTracker.DAL.ProjectModel>",
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Net.Http.HttpContentExtensions",
                        "Name": "ReadAsAsync<VstsListResponse.List>"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.DAL.VstsApi",
                        "Name": "SendApiUrlRequest",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "\"_apis/projects?stateFilter=All\" + ApiVersion"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "result.Values.Length > 0 ? result.Values.Select(r => new ProjectModel(r.Name, r.Url)) : null"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "Select",
                        "Arguments": [
                            {
                                "Type": "System.Func<Onguard.TimeTracker.DAL.VstsListResponse.Value, Onguard.TimeTracker.DAL.ProjectModel>",
                                "Text": "r => new ProjectModel(r.Name, r.Url)"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.DAL.ProjectModel",
                        "Name": "ProjectModel",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "r.Name"
                            },
                            {
                                "Type": "string",
                                "Text": "r.Url"
                            }
                        ]
                    }
                ],
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Returns": "Collection of project names",
                    "Summary": "Get all projects"
                }
            },
            {
                "Name": "GetReport",
                "Modifiers": 2,
                "ReturnType": "System.Collections.Generic.IEnumerable<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem>",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "string",
                        "Name": "project"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "string",
                        "Name": "team"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "string",
                        "Name": "sprint"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "string.IsNullOrEmpty(project)",
                                "Statements": [
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "System.ArgumentNullException",
                                        "Name": "ArgumentNullException",
                                        "Arguments": [
                                            {
                                                "Type": "string",
                                                "Text": "nameof(project)"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "string.IsNullOrEmpty(sprint)",
                                "Statements": [
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "System.ArgumentNullException",
                                        "Name": "ArgumentNullException",
                                        "Arguments": [
                                            {
                                                "Type": "string",
                                                "Text": "nameof(sprint)"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.Wiql",
                        "Name": "Wiql",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "Query = \"Select * \" +\r\n                        \"From WorkItems \" +\r\n                        \"Where [System.TeamProject] = '\" + project + \"' \" +\r\n                        \"And [System.IterationPath] = '\" + project + \"\\\\\" + sprint + \"' \" +\r\n                        //\"And [System.AreaPath] = '\" + project + \"\\\\\" + team + \"' \" +\r\n                        \"And [System.WorkItemType] = 'Task' \" +\r\n                        \"And [System.State] = 'Done' \" +\r\n                        \"Order By [Id] Asc\""
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "GetWorkItems(wiql)"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.DAL.VstsApi",
                        "Name": "GetWorkItems",
                        "Arguments": [
                            {
                                "Type": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.Wiql",
                                "Text": "wiql"
                            }
                        ]
                    }
                ],
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Returns": "Collection of work items",
                    "Summary": "Get work items for given sprint within a project"
                }
            },
            {
                "Name": "GetReport",
                "Modifiers": 2,
                "ReturnType": "System.Collections.Generic.IEnumerable<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem>",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "string",
                        "Name": "project"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "string",
                        "Name": "team"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "System.DateTime",
                        "Name": "startDate"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "System.DateTime",
                        "Name": "endDate"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "string",
                        "Name": "tag"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "bool",
                        "Name": "includePbis"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "bool",
                        "Name": "includeDefects"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "string.IsNullOrEmpty(project)",
                                "Statements": [
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "System.ArgumentNullException",
                                        "Name": "ArgumentNullException",
                                        "Arguments": [
                                            {
                                                "Type": "string",
                                                "Text": "nameof(project)"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "startDate == DateTime.MinValue",
                                "Statements": [
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "System.ArgumentNullException",
                                        "Name": "ArgumentNullException",
                                        "Arguments": [
                                            {
                                                "Type": "string",
                                                "Text": "nameof(startDate)"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "endDate == DateTime.MinValue",
                                "Statements": [
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "System.ArgumentNullException",
                                        "Name": "ArgumentNullException",
                                        "Arguments": [
                                            {
                                                "Type": "string",
                                                "Text": "nameof(endDate)"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "endDate < startDate",
                                "Statements": [
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "System.ArgumentException",
                                        "Name": "ArgumentException",
                                        "Arguments": [
                                            {
                                                "Type": "string",
                                                "Text": "\"enddate can not be earlier then startdate\""
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Collections.Generic.List<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.Wiql>",
                        "Name": "List<Wiql>"
                    },
                    {
                        "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                        "Expression": "Day in EachDay(startDate, endDate)",
                        "Statements": [
                            {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.Wiql",
                                "Name": "Wiql"
                            },
                            {
                                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                "Sections": [
                                    {
                                        "Condition": "includeDefects"
                                    }
                                ]
                            },
                            {
                                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                "Sections": [
                                    {
                                        "Condition": "includePbis"
                                    }
                                ]
                            },
                            {
                                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                "Sections": [
                                    {
                                        "Condition": "includePbis && includeDefects"
                                    }
                                ]
                            },
                            {
                                "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                                "Sections": [
                                    {
                                        "Condition": "!string.IsNullOrEmpty(tag)"
                                    }
                                ]
                            },
                            {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "System.DateTime",
                                "Name": "ToString",
                                "Arguments": [
                                    {
                                        "Type": "string",
                                        "Text": "\"yyyy-MM-ddTHH:mm:ss.ffffff\""
                                    }
                                ]
                            },
                            {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "System.Collections.Generic.List<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.Wiql>",
                                "Name": "Add",
                                "Arguments": [
                                    {
                                        "Type": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.Wiql",
                                        "Text": "wiql"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Collections.Generic.List<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem>",
                        "Name": "List<WorkItem>"
                    },
                    {
                        "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                        "Expression": "wiql in queries",
                        "Statements": [
                            {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "System.Collections.Generic.List<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem>",
                                "Name": "AddRange",
                                "Arguments": [
                                    {
                                        "Type": "System.Collections.Generic.IEnumerable<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem>",
                                        "Text": "GetWorkItems(wiql)"
                                    }
                                ]
                            },
                            {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "Onguard.TimeTracker.DAL.VstsApi",
                                "Name": "GetWorkItems",
                                "Arguments": [
                                    {
                                        "Type": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.Wiql",
                                        "Text": "wiql"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "result"
                    }
                ],
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Returns": "Collection of work items",
                    "Summary": "Get work items between given dates within a project"
                }
            },
            {
                "Name": "SendApiUrlRequest",
                "ReturnType": "System.Net.Http.HttpResponseMessage",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "string",
                        "Name": "url"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Convert",
                        "Name": "ToBase64String",
                        "Arguments": [
                            {
                                "Type": "byte[]",
                                "Text": "Encoding.ASCII.GetBytes($\":{PersonalAccessToken}\")"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Text.Encoding",
                        "Name": "GetBytes",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "$\":{PersonalAccessToken}\""
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Net.Http.HttpClient",
                        "Name": "HttpClient"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Uri",
                        "Name": "Uri",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "Url"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.MediaTypeWithQualityHeaderValue>",
                        "Name": "Clear"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.MediaTypeWithQualityHeaderValue>",
                        "Name": "Add",
                        "Arguments": [
                            {
                                "Type": "System.Net.Http.Headers.MediaTypeWithQualityHeaderValue",
                                "Text": "new MediaTypeWithQualityHeaderValue(\"application/json\")"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Net.Http.Headers.MediaTypeWithQualityHeaderValue",
                        "Name": "MediaTypeWithQualityHeaderValue",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "\"application/json\""
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Net.Http.Headers.AuthenticationHeaderValue",
                        "Name": "AuthenticationHeaderValue",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "\"Basic\""
                            },
                            {
                                "Type": "string",
                                "Text": "credentials"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "client.GetAsync(url).Result"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Net.Http.HttpClient",
                        "Name": "GetAsync",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "url"
                            }
                        ]
                    }
                ],
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Returns": "HttpResponseMessage",
                    "Summary": "Internal method for sending http request",
                    "Params": {
                        "url": "url"
                    }
                }
            },
            {
                "Name": "GetWorkItems",
                "ReturnType": "System.Collections.Generic.IEnumerable<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem>",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.Wiql",
                        "Name": "wiql"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Collections.Generic.List<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem>",
                        "Name": "List<WorkItem>"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.WorkItemTrackingHttpClient",
                        "Name": "WorkItemTrackingHttpClient",
                        "Arguments": [
                            {
                                "Type": "System.Uri",
                                "Text": "new Uri(Url)"
                            },
                            {
                                "Type": "Microsoft.VisualStudio.Services.Common.VssCredentials",
                                "Text": "_vssCredentials"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Uri",
                        "Name": "Uri",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "Url"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.WorkItemTrackingHttpClientBase",
                        "Name": "QueryByWiqlAsync",
                        "Arguments": [
                            {
                                "Type": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.Wiql",
                                "Text": "wiql"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Collections.Generic.List<int>",
                        "Name": "List<int>"
                    },
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "workItemQueryResult.WorkItemRelations != null",
                                "Statements": [
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "System.Linq.Enumerable",
                                        "Name": "ToList"
                                    }
                                ]
                            },
                            {
                                "Statements": [
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "System.Collections.Generic.List<int>",
                                        "Name": "AddRange",
                                        "Arguments": [
                                            {
                                                "Type": "System.Collections.Generic.IEnumerable<int>",
                                                "Text": "workItemQueryResult.WorkItems\r\n                            .Select(workItemReference => workItemReference.Id)"
                                            }
                                        ]
                                    },
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "System.Linq.Enumerable",
                                        "Name": "Select",
                                        "Arguments": [
                                            {
                                                "Type": "System.Func<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItemReference, int>",
                                                "Text": "workItemReference => workItemReference.Id"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "workItems.Any()",
                                "Statements": [
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.WorkItemTrackingHttpClientBase",
                                        "Name": "GetWorkItemsAsync",
                                        "Arguments": [
                                            {
                                                "Type": "System.Collections.Generic.List<int>",
                                                "Text": "workItems"
                                            },
                                            {
                                                "Type": "System.Collections.Generic.IEnumerable<string>",
                                                "Text": "null"
                                            },
                                            {
                                                "Type": "System.DateTime?",
                                                "Text": "null"
                                            },
                                            {
                                                "Type": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItemExpand",
                                                "Text": "WorkItemExpand.Relations"
                                            },
                                            {
                                                "Type": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItemErrorPolicy?",
                                                "Text": "null"
                                            },
                                            {
                                                "Type": "object",
                                                "Text": "null"
                                            },
                                            {
                                                "Type": "System.Threading.CancellationToken",
                                                "Text": "CancellationToken.None"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "result"
                    }
                ],
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "Internal method for collection WorkItems based on a Wiql query",
                    "Params": {
                        "wiql": ""
                    }
                }
            },
            {
                "Name": "GetWorkItems",
                "Modifiers": 2,
                "ReturnType": "System.Collections.Generic.List<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem>",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "System.Collections.Generic.IEnumerable<int>",
                        "Name": "ids"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Collections.Generic.List<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem>",
                        "Name": "List<WorkItem>"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.WorkItemTrackingHttpClient",
                        "Name": "WorkItemTrackingHttpClient",
                        "Arguments": [
                            {
                                "Type": "System.Uri",
                                "Text": "new Uri(Url)"
                            },
                            {
                                "Type": "Microsoft.VisualStudio.Services.Common.VssCredentials",
                                "Text": "_vssCredentials"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Uri",
                        "Name": "Uri",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "Url"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Linq.Enumerable",
                        "Name": "ToList"
                    },
                    {
                        "$type": "LivingDocumentation.ForEach, LivingDocumentation.Statements",
                        "Expression": "workItemId in enumerableWOrkitemIds",
                        "Statements": [
                            {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "System.Linq.Enumerable",
                                "Name": "FirstOrDefault"
                            },
                            {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.WorkItemTrackingHttpClientBase",
                                "Name": "GetWorkItemsAsync",
                                "Arguments": [
                                    {
                                        "Type": "int[]",
                                        "Text": "new[] {workItemId}"
                                    },
                                    {
                                        "Type": "System.Collections.Generic.IEnumerable<string>",
                                        "Text": "null"
                                    },
                                    {
                                        "Type": "System.DateTime?",
                                        "Text": "null"
                                    },
                                    {
                                        "Type": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItemExpand",
                                        "Text": "WorkItemExpand.Relations"
                                    }
                                ]
                            },
                            {
                                "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                "ContainingType": "System.Collections.Generic.List<Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem>",
                                "Name": "Add",
                                "Arguments": [
                                    {
                                        "Type": "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItem",
                                        "Text": "workItem"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "workItems"
                    }
                ],
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Params": {
                        "ids": ""
                    }
                }
            },
            {
                "Name": "GetWorkItemRevisions",
                "Modifiers": 2,
                "ReturnType": "Onguard.TimeTracker.DAL.ListofRevisionsReponse.Revisions",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "int",
                        "Name": "workItemId"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.DAL.VstsApi",
                        "Name": "SendApiUrlRequest",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "$\"_apis/wit/workitems/{workItemId}/revisions?$expand=relations\" + ApiVersion"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "response.IsSuccessStatusCode\r\n                ? response.Content.ReadAsAsync<ListofRevisionsReponse.Revisions>().Result\r\n                : new ListofRevisionsReponse.Revisions()"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Net.Http.HttpContentExtensions",
                        "Name": "ReadAsAsync<ListofRevisionsReponse.Revisions>"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.DAL.ListofRevisionsReponse.Revisions",
                        "Name": "ListofRevisionsReponse.Revisions"
                    }
                ],
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Returns": "WorkItems",
                    "Summary": "Calls VSTS api to collect all revision of a given workitem",
                    "Params": {
                        "workItemId": ""
                    }
                }
            },
            {
                "Name": "EachDay",
                "Modifiers": 2,
                "ReturnType": "System.Collections.Generic.IEnumerable<System.DateTime>",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "System.DateTime",
                        "Name": "from"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "System.DateTime",
                        "Name": "thru"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.DateTime",
                        "Name": "AddDays",
                        "Arguments": [
                            {
                                "Type": "int",
                                "Text": "1"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "Modifiers": 18,
        "FullName": "Onguard.TimeTracker.DAL.VstsApiConfiguration",
        "Fields": [
            {
                "Name": "Psa",
                "Modifiers": 146,
                "Type": "string",
                "Initializer": "\"natksnobfwyi4g3vdheugq4e7nzopm2lypm6fdhkqnmtlybxd5cq\""
            },
            {
                "Name": "Url",
                "Modifiers": 146,
                "Type": "string",
                "Initializer": "\"https://rogue-wan.visualstudio.com\""
            }
        ]
    },
    {
        "FullName": "Onguard.TimeTracker.DAL.VstsListResponse"
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.DAL.VstsListResponse.List",
        "DocumentationComments": {
            "Summary": "List"
        },
        "Properties": [
            {
                "Name": "Count",
                "Modifiers": 2,
                "Type": "int",
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "Count of items found by query"
                }
            },
            {
                "Name": "Values",
                "Modifiers": 2,
                "Type": "Onguard.TimeTracker.DAL.VstsListResponse.Value[]",
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "Collection with values"
                }
            }
        ]
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.DAL.VstsListResponse.Value",
        "DocumentationComments": {
            "Summary": "Value"
        },
        "Properties": [
            {
                "Name": "Name",
                "Modifiers": 2,
                "Type": "string",
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "Name of value"
                }
            },
            {
                "Name": "Url",
                "Modifiers": 2,
                "Type": "string",
                "DocumentationComments": {
                    "$type": "LivingDocumentation.DocumentationCommentsDescription, LivingDocumentation.Descriptions",
                    "Summary": "Corresponding url to VSTS item"
                }
            }
        ]
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.Model.Revision",
        "Constructors": [
            {
                "Name": "Revision",
                "Modifiers": 2,
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "Onguard.TimeTracker.Model.Revision.StateEnum",
                        "Name": "state"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "System.DateTime",
                        "Name": "dateChanged"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "string",
                        "Name": "changedBy"
                    }
                ]
            }
        ],
        "Properties": [
            {
                "Name": "State",
                "Modifiers": 2,
                "Type": "Onguard.TimeTracker.Model.Revision.StateEnum"
            },
            {
                "Name": "DateChanged",
                "Modifiers": 2,
                "Type": "System.DateTime"
            },
            {
                "Name": "ChangedBy",
                "Modifiers": 2,
                "Type": "string"
            }
        ]
    },
    {
        "Modifiers": 2,
        "Type": 3,
        "FullName": "Onguard.TimeTracker.Model.Revision.StateEnum",
        "EnumMembers": [
            {
                "Name": "ToDo",
                "Modifiers": 2
            },
            {
                "Name": "InProgress",
                "Modifiers": 2
            },
            {
                "Name": "Done",
                "Modifiers": 2
            }
        ]
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.Model.Task",
        "Properties": [
            {
                "Name": "Id",
                "Modifiers": 2,
                "Type": "int"
            },
            {
                "Name": "Title",
                "Modifiers": 2,
                "Type": "string"
            },
            {
                "Name": "Revisions",
                "Modifiers": 2,
                "Type": "System.Collections.Generic.List<Onguard.TimeTracker.Model.Revision>"
            }
        ]
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.Model.WorkItem",
        "Properties": [
            {
                "Name": "Id",
                "Modifiers": 2,
                "Type": "int"
            },
            {
                "Name": "Title",
                "Modifiers": 2,
                "Type": "string"
            },
            {
                "Name": "Type",
                "Modifiers": 2,
                "Type": "Onguard.TimeTracker.Model.WorkItem.WorkItemType"
            },
            {
                "Name": "Tasks",
                "Modifiers": 2,
                "Type": "System.Collections.Generic.List<Onguard.TimeTracker.Model.Task>"
            }
        ]
    },
    {
        "Modifiers": 2,
        "Type": 3,
        "FullName": "Onguard.TimeTracker.Model.WorkItem.WorkItemType",
        "EnumMembers": [
            {
                "Name": "ProductBacklogItem",
                "Modifiers": 2
            },
            {
                "Name": "Defect",
                "Modifiers": 2
            }
        ]
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.Models.ErrorViewModel",
        "Properties": [
            {
                "Name": "RequestId",
                "Modifiers": 2,
                "Type": "string"
            },
            {
                "Name": "ShowRequestId",
                "Modifiers": 2,
                "Type": "bool"
            }
        ]
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.Program",
        "Methods": [
            {
                "Name": "Main",
                "Modifiers": 18,
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "string[]",
                        "Name": "args"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions",
                        "Name": "Run"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.Extensions.Hosting.IHostBuilder",
                        "Name": "Build"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Onguard.TimeTracker.Program",
                        "Name": "CreateHostBuilder",
                        "Arguments": [
                            {
                                "Type": "string[]",
                                "Text": "args"
                            }
                        ]
                    }
                ]
            },
            {
                "Name": "CreateHostBuilder",
                "Modifiers": 18,
                "ReturnType": "Microsoft.Extensions.Hosting.IHostBuilder",
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "string[]",
                        "Name": "args"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.ReturnDescription, LivingDocumentation.Descriptions",
                        "Expression": "Host.CreateDefaultBuilder(args)\r\n                .ConfigureWebHostDefaults(webBuilder => { webBuilder.UseStartup<Startup>(); })"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.Extensions.Hosting.GenericHostBuilderExtensions",
                        "Name": "ConfigureWebHostDefaults",
                        "Arguments": [
                            {
                                "Type": "System.Action<Microsoft.AspNetCore.Hosting.IWebHostBuilder>",
                                "Text": "webBuilder => { webBuilder.UseStartup<Startup>(); }"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.Extensions.Hosting.Host",
                        "Name": "CreateDefaultBuilder",
                        "Arguments": [
                            {
                                "Type": "string[]",
                                "Text": "args"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions",
                        "Name": "UseStartup<Startup>"
                    }
                ]
            }
        ]
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.Startup",
        "Constructors": [
            {
                "Name": "Startup",
                "Modifiers": 2,
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "Microsoft.Extensions.Configuration.IConfiguration",
                        "Name": "configuration"
                    }
                ]
            }
        ],
        "Properties": [
            {
                "Name": "Configuration",
                "Modifiers": 2,
                "Type": "Microsoft.Extensions.Configuration.IConfiguration"
            }
        ],
        "Methods": [
            {
                "Name": "ConfigureServices",
                "Modifiers": 2,
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "Microsoft.Extensions.DependencyInjection.IServiceCollection",
                        "Name": "services"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Authentication.AzureADAuthenticationBuilderExtensions",
                        "Name": "AddAzureAD",
                        "Arguments": [
                            {
                                "Type": "System.Action<Microsoft.AspNetCore.Authentication.AzureAD.UI.AzureADOptions>",
                                "Text": "options => Configuration.Bind(\"AzureAd\", options)"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions",
                        "Name": "AddAuthentication",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "AzureADDefaults.AuthenticationScheme"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.Extensions.Configuration.ConfigurationBinder",
                        "Name": "Bind",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "\"AzureAd\""
                            },
                            {
                                "Type": "Microsoft.AspNetCore.Authentication.AzureAD.UI.AzureADOptions",
                                "Text": "options"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions",
                        "Name": "AddControllersWithViews",
                        "Arguments": [
                            {
                                "Type": "System.Action<Microsoft.AspNetCore.Mvc.MvcOptions>",
                                "Text": "options =>\r\n            {\r\n                var policy = new AuthorizationPolicyBuilder()\r\n                    .RequireAuthenticatedUser()\r\n                    .Build();\r\n                options.Filters.Add(new AuthorizeFilter(policy));\r\n            }"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder",
                        "Name": "Build"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder",
                        "Name": "RequireAuthenticatedUser"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder",
                        "Name": "AuthorizationPolicyBuilder"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "System.Collections.ObjectModel.Collection<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata>",
                        "Name": "Add",
                        "Arguments": [
                            {
                                "Type": "Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter",
                                "Text": "new AuthorizeFilter(policy)"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter",
                        "Name": "AuthorizeFilter",
                        "Arguments": [
                            {
                                "Type": "Microsoft.AspNetCore.Authorization.AuthorizationPolicy",
                                "Text": "policy"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions",
                        "Name": "AddRazorPages"
                    }
                ]
            },
            {
                "Name": "Configure",
                "Modifiers": 2,
                "Parameters": [
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "Microsoft.AspNetCore.Builder.IApplicationBuilder",
                        "Name": "app"
                    },
                    {
                        "$type": "LivingDocumentation.ParameterDescription, LivingDocumentation.Descriptions",
                        "Type": "Microsoft.AspNetCore.Hosting.IWebHostEnvironment",
                        "Name": "env"
                    }
                ],
                "Statements": [
                    {
                        "$type": "LivingDocumentation.If, LivingDocumentation.Statements",
                        "Sections": [
                            {
                                "Condition": "env.IsDevelopment() || true",
                                "Statements": [
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "Microsoft.AspNetCore.Builder.DeveloperExceptionPageExtensions",
                                        "Name": "UseDeveloperExceptionPage"
                                    }
                                ]
                            },
                            {
                                "Statements": [
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions",
                                        "Name": "UseExceptionHandler",
                                        "Arguments": [
                                            {
                                                "Type": "string",
                                                "Text": "\"/Home/Error\""
                                            }
                                        ]
                                    },
                                    {
                                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                                        "ContainingType": "Microsoft.AspNetCore.Builder.HstsBuilderExtensions",
                                        "Name": "UseHsts"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Builder.HttpsPolicyBuilderExtensions",
                        "Name": "UseHttpsRedirection"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Builder.StaticFileExtensions",
                        "Name": "UseStaticFiles"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Builder.EndpointRoutingApplicationBuilderExtensions",
                        "Name": "UseRouting"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Builder.AuthAppBuilderExtensions",
                        "Name": "UseAuthentication"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Builder.AuthorizationAppBuilderExtensions",
                        "Name": "UseAuthorization"
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Builder.EndpointRoutingApplicationBuilderExtensions",
                        "Name": "UseEndpoints",
                        "Arguments": [
                            {
                                "Type": "System.Action<Microsoft.AspNetCore.Routing.IEndpointRouteBuilder>",
                                "Text": "endpoints =>\r\n            {\r\n                endpoints.MapControllerRoute(\r\n                    name: \"default\",\r\n                    pattern: \"{controller=Home}/{action=Home}/{id?}\");\r\n                endpoints.MapRazorPages();\r\n            }"
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions",
                        "Name": "MapControllerRoute",
                        "Arguments": [
                            {
                                "Type": "string",
                                "Text": "\"default\""
                            },
                            {
                                "Type": "string",
                                "Text": "\"{controller=Home}/{action=Home}/{id?}\""
                            }
                        ]
                    },
                    {
                        "$type": "LivingDocumentation.InvocationDescription, LivingDocumentation.Descriptions",
                        "ContainingType": "Microsoft.AspNetCore.Builder.RazorPagesEndpointRouteBuilderExtensions",
                        "Name": "MapRazorPages"
                    }
                ]
            }
        ]
    },
    {
        "Modifiers": 2,
        "FullName": "Onguard.TimeTracker.Views.Home.HomeInputHiddenFields",
        "BaseTypes": [
            "Microsoft.AspNetCore.Mvc.RazorPages.PageModel"
        ],
        "Methods": [
            {
                "Name": "OnGet",
                "Modifiers": 2
            }
        ]
    }
]